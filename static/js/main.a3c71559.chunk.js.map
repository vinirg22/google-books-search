{"version":3,"sources":["components/DragonBallImage.js","App.js","serviceWorker.js","index.js"],"names":["DragonBallImage","props","react_default","a","createElement","src","url","alt","onClick","handleImageClick","randomPupId","images","max","length","Math","floor","random","id","App","state","clicks","score","currentPupId","newState","_this","setState","_this2","this","className","map","image","components_DragonBallImage","key","process","fileName","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6YASeA,MANf,SAAyBC,GACvB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAMK,IAAKC,IAAI,aAAaC,QAASP,EAAMQ,2BCMnDC,SAAc,kBAAMC,GAHPC,EAGyBD,EAAOE,OAHzBC,KAAKC,MAAMD,KAAKE,SAAWJ,KAGOK,GAHzC,IAAAL,IAgDJM,6MAxCbC,MAAQ,CACNC,OAAQ,EACRC,MAAO,EACPC,aAAcZ,OAIhBD,iBAAmB,SAAAQ,GAEjB,IAAMM,EAAW,CAAEH,OAAQI,EAAKL,MAAMC,OAAS,GAG3CH,IAAOO,EAAKL,MAAMG,eAEpBC,EAASF,MAAQG,EAAKL,MAAME,MAAQ,EACpCE,EAASD,aAAeZ,KAG1Bc,EAAKC,SAASF,4EAGP,IAAAG,EAAAC,KACP,OACEzB,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,aACb1B,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,qBAAauB,KAAKR,MAAME,OACxBnB,EAAAC,EAAAC,cAAA,sBAAcuB,KAAKR,MAAMC,QAExBT,EAAOkB,IAAI,SAAAC,GAAK,OACf5B,EAAAC,EAAAC,cAAC2B,EAAD,CACEC,IAAKF,EAAMb,GACXR,iBAAkB,kBAAMiB,EAAKjB,iBAAiBqB,EAAMb,KACpDX,IAAK2B,oBAAmCH,EAAMI,qBAlCxCC,IAAMC,WCFJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a3c71559.chunk.js","sourcesContent":["\nimport React from 'react'\n\nfunction DragonBallImage(props) {\n  return (\n    <img src={props.url} alt=\"dragonball\" onClick={props.handleImageClick} />\n  )\n}\n\nexport default DragonBallImage","import React from 'react'\n\nimport DragonBallImage from './components/DragonBallImage'\nimport images from './components/images.json'\n\nimport './App.css'\n\n// pick a random number up to but not including max\nconst pickRandom = max => Math.floor(Math.random() * max)\n\n// pick out a random pup\nconst randomPupId = () => images[pickRandom(images.length)].id\n\n// track\nclass App extends React.Component {\n  // define initial state values\n  state = {\n    clicks: 0,\n    score: 0,\n    currentPupId: randomPupId()\n  }\n\n  // when image is clicked\n  handleImageClick = id => {\n    // update click count in state\n    const newState = { clicks: this.state.clicks + 1 }\n\n    // did the user click the current pup\n    if (id === this.state.currentPupId) {\n      // increase score\n      newState.score = this.state.score + 1\n      newState.currentPupId = randomPupId()\n    }\n\n    this.setState(newState)\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Dragon Ball Clicker</h1>\n        <div>Score: {this.state.score}</div>\n        <div>Clicks: {this.state.clicks}</div>\n        {/* reference images in the public folder */}\n        {images.map(image => (\n          <DragonBallImage\n            key={image.id}\n            handleImageClick={() => this.handleImageClick(image.id)}\n            url={process.env.PUBLIC_URL + '/img/' + image.fileName}\n          />\n        ))}\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}